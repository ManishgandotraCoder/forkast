generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           Int               @id @default(autoincrement())
  email        String            @unique
  password     String
  name         String
  age          Int?
  encryptedEmail String?         // Encrypted email for additional security
  encryptedName  String?         // Encrypted name for additional security
  publicKey    String?           // User's RSA public key
  createdAt    DateTime          @default(now())
  balances     Balance[]
  orders       Order[]
  transactions UserTransaction[]
}

model Order {
  id             Int      @id @default(autoincrement())
  userId         Int
  type           String
  symbol         String
  price          Float
  quantity       Float
  filledQuantity Float    @default(0)
  status         String   @default("open")
  market         Boolean  @default(false)
  p2p            Boolean  @default(false)
  encryptedSymbol String? // Encrypted symbol for additional security
  encryptedPrice  String? // Encrypted price for additional security
  encryptedQuantity String? // Encrypted quantity for additional security
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  user           User     @relation(fields: [userId], references: [id])
  trades         Trade[]  @relation("BuyOrder")
  tradesSell     Trade[]  @relation("SellOrder")
}

model Trade {
  id           Int      @id @default(autoincrement())
  buyOrderId   Int?
  sellOrderId  Int?
  buyerUserId  Int?
  sellerUserId Int?
  price        Float
  quantity     Float
  encryptedPrice String? // Encrypted price for additional security
  encryptedQuantity String? // Encrypted quantity for additional security
  executedAt   DateTime @default(now())
  buyOrder     Order?   @relation("BuyOrder", fields: [buyOrderId], references: [id])
  sellOrder    Order?   @relation("SellOrder", fields: [sellOrderId], references: [id])
}

model Balance {
  id        Int      @id @default(autoincrement())
  userId    Int
  symbol    String
  amount    Float    @default(0)
  locked    Float    @default(0)
  costPrice Int?
  encryptedSymbol String? // Encrypted symbol for additional security
  encryptedAmount String? // Encrypted amount for additional security
  encryptedLocked String? // Encrypted locked amount for additional security
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])

  @@unique([userId, symbol])
}

model UserTransaction {
  id             Int      @id @default(autoincrement())
  userId         Int
  type           String
  currency       String
  amountSpent    Float
  usdtReceived   Float
  exchangeRate   Float
  createdAt      DateTime @default(now())
  user           User     @relation(fields: [userId], references: [id])
}
